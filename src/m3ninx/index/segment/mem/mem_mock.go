// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3/src/m3ninx/index/segment/mem (interfaces: ReadableSegment)

// Package mem is a generated GoMock package.
package mem

import (
	gomock "github.com/golang/mock/gomock"
	doc "github.com/m3db/m3/src/m3ninx/doc"
	postings "github.com/m3db/m3/src/m3ninx/postings"
	reflect "reflect"
	regexp "regexp"
)

// MockReadableSegment is a mock of ReadableSegment interface
type MockReadableSegment struct {
	ctrl     *gomock.Controller
	recorder *MockReadableSegmentMockRecorder
}

// MockReadableSegmentMockRecorder is the mock recorder for MockReadableSegment
type MockReadableSegmentMockRecorder struct {
	mock *MockReadableSegment
}

// NewMockReadableSegment creates a new mock instance
func NewMockReadableSegment(ctrl *gomock.Controller) *MockReadableSegment {
	mock := &MockReadableSegment{ctrl: ctrl}
	mock.recorder = &MockReadableSegmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReadableSegment) EXPECT() *MockReadableSegmentMockRecorder {
	return m.recorder
}

// getDoc mocks base method
func (m *MockReadableSegment) getDoc(arg0 postings.ID) (doc.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getDoc", arg0)
	ret0, _ := ret[0].(doc.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getDoc indicates an expected call of getDoc
func (mr *MockReadableSegmentMockRecorder) getDoc(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getDoc", reflect.TypeOf((*MockReadableSegment)(nil).getDoc), arg0)
}

// matchRegexp mocks base method
func (m *MockReadableSegment) matchRegexp(arg0 []byte, arg1 *regexp.Regexp) (postings.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "matchRegexp", arg0, arg1)
	ret0, _ := ret[0].(postings.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// matchRegexp indicates an expected call of matchRegexp
func (mr *MockReadableSegmentMockRecorder) matchRegexp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "matchRegexp", reflect.TypeOf((*MockReadableSegment)(nil).matchRegexp), arg0, arg1)
}

// matchTerm mocks base method
func (m *MockReadableSegment) matchTerm(arg0, arg1 []byte) (postings.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "matchTerm", arg0, arg1)
	ret0, _ := ret[0].(postings.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// matchTerm indicates an expected call of matchTerm
func (mr *MockReadableSegmentMockRecorder) matchTerm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "matchTerm", reflect.TypeOf((*MockReadableSegment)(nil).matchTerm), arg0, arg1)
}
